# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FOpSgR8Ltm_lgg59wKavhDtCm9Np4FXl

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
q1 = """
  SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf* ns:LivingThing .
  }
"""
for r in g.query(q1):
    print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results
q1 = """
  SELECT ?individual WHERE {
    ?class rdfs:subClassOf* ns:Person .
    ?individual rdf:type ?class .
  }
"""
for r in g.query(q1):
    print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
# Visualize the results
q1 = """
  SELECT ?individual WHERE {
    ?individual rdf:type ?type .
    FILTER(?type = ns:Person || ?type = ns:Animal)
  }
"""
for r in g.query(q1):
    print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
q1 = """
  SELECT (STR(?name) AS ?nameString) WHERE {
    ?person a/rdfs:subClassOf* ns:Person ;
    foaf:knows ns:RockySmith ;
    vcard-rdf:Given ?name .
  }
"""
for r in g.query(q1):
    print(r)
# Visualize the results

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q1 = """
  SELECT (STR(?name) AS ?nameString) WHERE {
    ?class rdfs:subClassOf* ns:Animal .
    ?animal1 rdf:type ?class .
    ?animal2 rdf:type ?class ;
    foaf:knows ?animal1 ;
    vcard-rdf:Given ?name .
  }
"""
#?person rdf:type ns:Person;
for r in g.query(q1):
    print(r)
# Visualize the results

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
# Visualize the results
q1 = """
  SELECT (STR(?age) AS ?ageString) WHERE {
    ?class rdfs:subClassOf* ns:LivingThing .
    ?individual rdf:type ?class ;
    foaf:age ?age .
  }
  ORDER BY DESC(?age)
"""
for r in g.query(q1):
    print(r)